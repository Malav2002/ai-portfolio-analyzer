# docker-compose.yml - Relaxed health checks
version: '3.8'

services:
  postgres:
    image: postgres:15-alpine
    container_name: portfolio_postgres
    environment:
      POSTGRES_DB: portfolio_analyzer
      POSTGRES_USER: portfolio_user
      POSTGRES_PASSWORD: portfolio_pass
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U portfolio_user -d portfolio_analyzer"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7-alpine
    container_name: portfolio_redis
    command: redis-server --requirepass redis_pass
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5

  ml-service:
    build:
      context: ./ml-service
      dockerfile: Dockerfile
    container_name: portfolio_ml_service
    environment:
      - ALPHA_VANTAGE_API_KEY=${ALPHA_VANTAGE_API_KEY}
      - FINANCIAL_MODELING_PREP_API_KEY=${FINANCIAL_MODELING_PREP_API_KEY}
      - POLYGON_API_KEY=${POLYGON_API_KEY}
      - DATABASE_URL=postgresql://portfolio_user:portfolio_pass@postgres:5432/portfolio_analyzer
      - REDIS_URL=redis://:redis_pass@redis:6379
    ports:
      - "8002:8002"
    volumes:
      - ./ml-service:/app
      - /app/__pycache__
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8002/health", "||", "curl", "-f", "http://localhost:8002/"]
      interval: 30s
      timeout: 15s
      retries: 5
      start_period: 90s
    restart: unless-stopped

  backend:
    build: 
      context: ./backend
      dockerfile: Dockerfile
    container_name: portfolio_backend
    environment:
      - NODE_ENV=development
      - PORT=3001
      - DATABASE_URL=postgresql://portfolio_user:portfolio_pass@postgres:5432/portfolio_analyzer
      - REDIS_URL=redis://:redis_pass@redis:6379
      - ML_SERVICE_URL=http://ml-service:8002
      - ALPHA_VANTAGE_API_KEY=${ALPHA_VANTAGE_API_KEY}
      - FINANCIAL_MODELING_PREP_API_KEY=${FINANCIAL_MODELING_PREP_API_KEY}
    ports:
      - "3001:3001"
    volumes:
      - ./backend:/app
      - /app/node_modules
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      # Don't wait for ML service health - it may take time to start
      ml-service:
        condition: service_started
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    restart: unless-stopped

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: portfolio_frontend
    environment:
      - NEXT_PUBLIC_API_URL=http://localhost:3001
    ports:
      - "3000:3000"
    volumes:
      - ./frontend:/app
      - /app/node_modules
      - /app/.next
    depends_on:
      - backend
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 90s
    restart: unless-stopped

volumes:
  postgres_data:
  redis_data: