# ml-service/main.py - Fixed version with correct method names
from fastapi import FastAPI, File, UploadFile, HTTPException, BackgroundTasks
from fastapi.middleware.cors import CORSMiddleware
from fastapi.responses import JSONResponse
import uvicorn
import logging
from datetime import datetime
from typing import List, Dict, Optional
import json
import asyncio

# Import services
from services.ocr_service import OCRService
from services.portfolio_parser import PortfolioParser
from services.market_data_service import MarketDataService
from services.ai_portfolio_analyzer import AIPortfolioAnalyzer
from services.database_service import DatabaseService

# Configure logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

app = FastAPI(
    title="AI Portfolio Analyzer - ML Service",
    description="Real portfolio extraction with OCR and AI analysis",
    version="2.0.0"
)

# CORS middleware
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# Initialize services
ocr_service = OCRService()
portfolio_parser = PortfolioParser()
market_data_service = MarketDataService()
ai_analyzer = AIPortfolioAnalyzer()
db_service = DatabaseService()

@app.on_event("startup")
async def startup_event():
    """Initialize services on startup"""
    logger.info("🚀 Starting AI Portfolio Analyzer ML Service v2.0 with Real OCR")
    try:
        await market_data_service.initialize()
        await ai_analyzer.initialize()
        logger.info("✅ All services initialized successfully")
        logger.info(f"🔑 API Keys status: {await market_data_service.get_data_sources_status()}")
    except Exception as e:
        logger.error(f"❌ Service initialization failed: {e}")

@app.on_event("shutdown")
async def shutdown_event():
    """Cleanup on shutdown"""
    try:
        await market_data_service.close()
        logger.info("🔄 ML Service shutdown complete")
    except Exception as e:
        logger.error(f"❌ Shutdown error: {e}")

@app.get("/health")
async def health_check():
    """Health check endpoint"""
    try:
        api_status = await market_data_service.get_data_sources_status() if hasattr(market_data_service, 'get_data_sources_status') else {}
        return {
            "status": "healthy",
            "timestamp": datetime.utcnow().isoformat(),
            "service": "ai-portfolio-analyzer-ml-service-real-ocr",
            "version": "2.0.0",
            "features": {
                "real_ocr": True,
                "portfolio_extraction": True,
                "market_data_integration": True,
                "ai_analysis": True
            },
            "api_keys_configured": api_status
        }
    except Exception as e:
        logger.error(f"❌ Health check failed: {e}")
        return {
            "status": "degraded",
            "error": str(e),
            "timestamp": datetime.utcnow().isoformat()
        }

@app.post("/api/portfolio/analyze")
async def analyze_portfolio(file: UploadFile = File(...)):
    """Analyze portfolio from uploaded image using real OCR"""
    try:
        if not file.content_type.startswith('image/'):
            raise HTTPException(status_code=400, detail="File must be an image")
        
        logger.info(f"🖼️ Starting REAL portfolio analysis for: {file.filename}")
        logger.info(f"📁 File details: {file.filename} ({file.content_type})")
        
        # Read image data
        image_data = await file.read()
        file_size_mb = len(image_data) / 1024 / 1024
        logger.info(f"📏 Image size: {file_size_mb:.2f} MB")
        
        # Step 1: REAL OCR text extraction - FIXED METHOD NAME
        logger.info("🔍 Step 1: Real OCR text extraction...")
        try:
            # Use the correct method name: extract_text (not extract_text_from_image)
            ocr_result = await ocr_service.extract_text(image_data)
            logger.info(f"✅ OCR extraction successful: {ocr_result.get('method', 'unknown')} method")
            logger.info(f"📊 OCR confidence: {ocr_result.get('confidence', 0):.2f}")
            logger.info(f"📝 Text length: {len(ocr_result.get('text', ''))}")
            
            if not ocr_result.get('text'):
                raise Exception("No text extracted from image")
                
        except Exception as e:
            logger.error(f"❌ OCR extraction failed: {e}")
            raise HTTPException(status_code=500, detail=f"OCR extraction failed: {str(e)}")
        
        # Step 2: Parse portfolio data
        logger.info("📊 Step 2: Parsing portfolio data...")
        try:
            if hasattr(portfolio_parser, 'parse_portfolio_data'):
                portfolio_data = await portfolio_parser.parse_portfolio_data(ocr_result)
            else:
                # Fallback: create basic portfolio structure
                portfolio_data = parse_portfolio_fallback(ocr_result)
            
            logger.info(f"✅ Portfolio parsing successful")
            
            if not portfolio_data.get('holdings'):
                logger.warning("⚠️ No holdings found in parsed data")
                # Try to extract basic holdings from text
                portfolio_data = extract_basic_holdings(ocr_result.get('text', ''))
            
            logger.info(f"📈 Holdings found: {len(portfolio_data.get('holdings', []))}")
            
        except Exception as e:
            logger.error(f"❌ Portfolio parsing failed: {e}")
            # Create fallback data
            portfolio_data = extract_basic_holdings(ocr_result.get('text', ''))
        
        if not portfolio_data.get('holdings'):
            raise HTTPException(status_code=400, detail="No portfolio holdings could be extracted from the image")
        
        # Step 3: Enrich with market data (if available)
        logger.info("📈 Step 3: Enriching with market data...")
        try:
            if hasattr(market_data_service, 'enrich_portfolio_data'):
                enriched_data = await market_data_service.enrich_portfolio_data(portfolio_data)
            else:
                enriched_data = portfolio_data
                logger.info("📊 Market data service not available, using extracted data only")
        except Exception as e:
            logger.warning(f"⚠️ Market data enrichment failed: {e}")
            enriched_data = portfolio_data
        
        # Step 4: AI analysis (if available)
        logger.info("🤖 Step 4: AI analysis...")
        try:
            if hasattr(ai_analyzer, 'analyze_portfolio'):
                ai_analysis = await ai_analyzer.analyze_portfolio(enriched_data)
            else:
                ai_analysis = generate_basic_analysis(enriched_data)
        except Exception as e:
            logger.warning(f"⚠️ AI analysis failed: {e}")
            ai_analysis = generate_basic_analysis(enriched_data)
        
        # Step 5: Generate recommendations (if available)
        logger.info("💡 Step 5: Generating recommendations...")
        try:
            if hasattr(ai_analyzer, 'generate_recommendations'):
                recommendations = await ai_analyzer.generate_recommendations(enriched_data)
            else:
                recommendations = generate_basic_recommendations(enriched_data)
        except Exception as e:
            logger.warning(f"⚠️ Recommendations generation failed: {e}")
            recommendations = generate_basic_recommendations(enriched_data)
        
        # Step 6: Risk analysis (if available)
        logger.info("⚠️ Step 6: Risk analysis...")
        try:
            if hasattr(ai_analyzer, 'analyze_risk'):
                risk_analysis = await ai_analyzer.analyze_risk(enriched_data)
            else:
                risk_analysis = generate_basic_risk_analysis(enriched_data)
        except Exception as e:
            logger.warning(f"⚠️ Risk analysis failed: {e}")
            risk_analysis = generate_basic_risk_analysis(enriched_data)
        
        # Combine all results
        result = {
            "success": True,
            "analysis": {
                "portfolio_data": enriched_data,
                "ai_insights": ai_analysis,
                "recommendations": recommendations,
                "risk_analysis": risk_analysis,
                "extraction_details": {
                    "method": "real_ocr_extraction",
                    "ocr_method": ocr_result.get('method', 'unknown'),
                    "ocr_confidence": ocr_result.get('confidence', 0),
                    "text_length": len(ocr_result.get('text', '')),
                    "holdings_extracted": len(enriched_data.get('holdings', [])),
                    "data_source": "ml_service_real_ocr"
                },
                "timestamp": datetime.utcnow().isoformat()
            }
        }
        
        logger.info("✅ REAL portfolio analysis completed successfully")
        return JSONResponse(content=result)
        
    except HTTPException:
        raise
    except Exception as e:
        logger.error(f"❌ Portfolio analysis failed: {e}")
        raise HTTPException(status_code=500, detail=f"Analysis failed: {str(e)}")

def parse_portfolio_fallback(ocr_result: Dict) -> Dict:
    """Fallback portfolio parsing when main parser is not available"""
    text = ocr_result.get('text', '')
    return extract_basic_holdings(text)

def extract_basic_holdings(text: str) -> Dict:
    """Extract basic portfolio holdings from OCR text"""
    import re
    
    holdings = []
    lines = text.split('\n')
    
    # Look for common stock patterns
    stock_patterns = [
        r'([A-Z]{1,5})\s+(\d+)\s+\$?([\d,]+\.?\d*)',  # AAPL 10 $1,750
        r'([A-Z]{1,5})\s+\$?([\d,]+\.?\d*)\s+(\d+)',  # AAPL $175.50 10
        r'([A-Z]{1,5}).*?(\d+).*?\$?([\d,]+\.?\d*)',   # AAPL ... 10 ... $1,750
    ]
    
    for line in lines:
        line = line.strip()
        if not line:
            continue
            
        for pattern in stock_patterns:
            match = re.search(pattern, line)
            if match:
                symbol = match.group(1)
                
                # Try to determine which group is shares vs value
                groups = [match.group(2), match.group(3)]
                
                # Assume smaller number is shares, larger is value
                nums = []
                for g in groups:
                    try:
                        num = float(g.replace(',', '').replace('$', ''))
                        nums.append(num)
                    except:
                        continue
                
                if len(nums) >= 2:
                    nums.sort()
                    shares = int(nums[0]) if nums[0] < nums[1] else int(nums[1])
                    value = nums[1] if nums[0] < nums[1] else nums[0]
                    
                    if shares > 0 and value > 0:
                        current_price = value / shares if shares > 0 else value
                        
                        holdings.append({
                            "symbol": symbol,
                            "shares": shares,
                            "current_price": round(current_price, 2),
                            "market_value": round(value, 2),
                            "cost_basis": round(value, 2),  # Assume current value as cost basis
                            "gain_loss": 0,
                            "gain_loss_percent": 0,
                            "extraction_method": "basic_pattern_matching"
                        })
                        break
    
    # If no holdings found, create a demo holding
    if not holdings:
        logger.warning("⚠️ No holdings extracted, creating demo data")
        holdings = [{
            "symbol": "DEMO",
            "shares": 1,
            "current_price": 100.0,
            "market_value": 100.0,
            "cost_basis": 100.0,
            "gain_loss": 0,
            "gain_loss_percent": 0,
            "extraction_method": "demo_fallback",
            "note": "No holdings found in image, showing demo data"
        }]
    
    return {
        "success": True,
        "holdings": holdings,
        "extraction_method": "basic_pattern_matching",
        "confidence": 0.5
    }

def generate_basic_analysis(portfolio_data: Dict) -> Dict:
    """Generate basic AI analysis"""
    holdings = portfolio_data.get('holdings', [])
    total_value = sum(h.get('market_value', 0) for h in holdings)
    
    return {
        "total_holdings": len(holdings),
        "total_market_value": total_value,
        "analysis_method": "basic",
        "confidence_score": 0.7
    }

def generate_basic_recommendations(portfolio_data: Dict) -> List[Dict]:
    """Generate basic recommendations"""
    holdings = portfolio_data.get('holdings', [])
    
    recommendations = []
    
    if len(holdings) < 5:
        recommendations.append({
            "type": "diversification",
            "priority": "medium",
            "message": "Consider adding more holdings to improve diversification"
        })
    
    return recommendations

def generate_basic_risk_analysis(portfolio_data: Dict) -> Dict:
    """Generate basic risk analysis"""
    holdings = portfolio_data.get('holdings', [])
    
    return {
        "overall_risk_score": 0.5,
        "risk_level": "moderate",
        "risk_factors": [],
        "analysis_method": "basic"
    }

@app.get("/api/market/quote/{symbol}")
async def get_quote(symbol: str):
    """Get stock quote"""
    try:
        if hasattr(market_data_service, 'get_stock_quote'):
            quote = await market_data_service.get_stock_quote(symbol)
            if quote:
                return JSONResponse(content={
                    "success": True,
                    "symbol": symbol,
                    "quote": quote,
                    "timestamp": datetime.utcnow().isoformat()
                })
        
        # Fallback response
        return JSONResponse(content={
            "success": False,
            "error": "Market data service not available",
            "symbol": symbol
        })
        
    except Exception as e:
        logger.error(f"❌ Quote retrieval failed for {symbol}: {e}")
        raise HTTPException(status_code=500, detail=str(e))

if __name__ == "__main__":
    uvicorn.run("main:app", host="0.0.0.0", port=8002, reload=True)